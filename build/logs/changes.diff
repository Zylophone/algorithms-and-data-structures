--- src/BinaryTreeNode.php
+++ PHP_CodeSniffer
@@ -16,8 +16,8 @@
     function __construct($data)
     {
         $this->data = $data;
-        $this->left = NULL;
-        $this->right = NULL;
+        $this->left = null;
+        $this->right = null;
     }
     
     public function readNode()--- src/DataStructureInterface.php
+++ PHP_CodeSniffer
@@ -23,7 +23,7 @@
 
     /**
      *
-     * @param unknown $value            
+     * @param unknown $value
      */
     public function add($value);
 
@@ -33,26 +33,26 @@
 
     /**
      *
-     * @param unknown $value            
+     * @param unknown $value
      */
     public function search($value);
 
     /**
      *
-     * @param string $position            
+     * @param string $position
      */
-    public function delete($position = NULL);
+    public function delete($position = null);
 
     /**
      *
-     * @param string $position            
-     * @param unknown $value            
+     * @param string $position
+     * @param unknown $value
      */
-    public function setData($position = NULL, $value);
+    public function setData($position = null, $value);
 
     /**
      *
-     * @param string $position            
+     * @param string $position
      */
-    public function getData($position = NULL);
+    public function getData($position = null);
 }--- src/DataStructureNodeInterface.php
+++ PHP_CodeSniffer
@@ -4,7 +4,7 @@
 
 /**
  * A node is the object that holds data.
- * 
+ *
  * @author mtkocak
  * @see http://www.codediesel.com/php/linked-list-in-php/
  *
@@ -15,7 +15,7 @@
     /**
      * Returns data held in node.
      *
-     * We consider data as strings, but hence php is not strongly typed, we can 
+     * We consider data as strings, but hence php is not strongly typed, we can
      * reuse this data as integer or etc.
      *
      * @return string--- src/DoubleLinkedList.php
+++ PHP_CodeSniffer
@@ -16,14 +16,15 @@
         $this->init();
     }
     
-    function __toString(){
-        return print_r($this->listAll(),true);
+    function __toString()
+    {
+        return print_r($this->listAll(), true);
     }
 
     public function init()
     {
-        $this->firstNode = NULL;
-        $this->lastNode = NULL;
+        $this->firstNode = null;
+        $this->lastNode = null;
         $this->current = $this->firstNode;
         $this->count = 0;
     }
@@ -53,7 +54,7 @@
 
     /**
      * Using prev adding is easier
-     * 
+     *
      * @see \Mtkocak\Algorithms\DataStructureInterface::add()
      */
     public function add($value)
@@ -81,7 +82,7 @@
             $this->reset();
             return true;
         }
-        while ($this->current->next != NULL && $currentPosition != $position) {
+        while ($this->current->next != null && $currentPosition != $position) {
             $this->next();
             $currentPosition ++;
             if ($position == ($currentPosition + 1)) {
@@ -92,7 +93,7 @@
         return false;
     }
 
-    public function getData($position = NULL)
+    public function getData($position = null)
     {
         if (! $this->isEmpty() && ! isset($position)) {
             return $this->lastNode->readNode();
@@ -109,7 +110,7 @@
     {
         
         // return ($this->firstNode == NULL); // Same as above. Better Readability
-        if ($this->firstNode == NULL) {
+        if ($this->firstNode == null) {
             return true;
         } else {
             return false;
@@ -123,11 +124,11 @@
         $listData = [];
         if (! $this->isEmpty()) {
             $this->reset();
-            while ($this->current->next != NULL) {
+            while ($this->current->next != null) {
                 array_push($listData, $this->current->readNode());
                 $this->next();
             }
-            if ($this->current->next == NULL) {
+            if ($this->current->next == null) {
                 array_push($listData, $this->current->readNode());
             }
         }
@@ -137,17 +138,17 @@
     /**
      * Recursive Search Function
      *
-     * @param unknown $value            
+     * @param unknown $value
      */
     public function search($value, $node = null, $position = null)
     {
         // check empty
-        if ($this->firstNode == NULL) {
+        if ($this->firstNode == null) {
             return false;
         }
         
         // first call
-        if ($position == NULL && $node == null) {
+        if ($position == null && $node == null) {
             $this->reset();
             $node = $this->firstNode;
             $position = 0;
@@ -157,7 +158,7 @@
             if ($node->readNode() == $value) {
                 return $position;
             } else {
-                if ($node->next != NULL) {
+                if ($node->next != null) {
                     $position ++;
                     return $this->search($value, $node->next, $position);
                 }
@@ -170,58 +171,52 @@
      *
      * With prev variable, deleting is easier
      *
-     * @param string $position            
+     * @param string $position
      */
-    public function delete($position = NULL)
+    public function delete($position = null)
     {
-        if($position!=null){
+        if ($position!=null) {
             // Check Empty
-            if($this->lastNode!=NULL){
-                
+            if ($this->lastNode!=null) {
                 // Delete last node;
                 $oldLastNode = $this->lastNode;
                 $this->lastNode = $oldLastNode->prev;
                 unset($oldLastNode);
-                $this->lastNode->next = NULL;
+                $this->lastNode->next = null;
                 return true;
             }
-        }else{
-            $this->goToPosition($position);            
+        } else {
+            $this->goToPosition($position);
             $nodeToDelete = $this->current;
-            if($this->current->next!=NULL)
-            {
+            if ($this->current->next!=null) {
                 $nextNode = $this->current->next;
                 $nextNode->prev = $this->current->prev;
             }
-            if($this->current->prev!=NULL)
-            {
+            if ($this->current->prev!=null) {
                 $prevNode = $this->current->prev;
                 $prevNode->next = $this->current->next;
             }
             
             unset($nodeToDelete);
-            return true;      
+            return true;
         }
         return false;
     }
 
     /**
      *
-     * @param string $position            
-     * @param unknown $value            
+     * @param string $position
+     * @param unknown $value
      */
-    public function setData($value, $position = NULL)
+    public function setData($value, $position = null)
     {
-        if($position==null)
-        {
+        if ($position==null) {
             $this->reset();
-        }
-        else
-        {
+        } else {
             $this->goToPosition($position);
         }
        
-        if(!$this->isEmpty()){
+        if (!$this->isEmpty()) {
             $this->current->data == $value;
             return true;
         }--- src/DoubleLinkedListNode.php
+++ PHP_CodeSniffer
@@ -13,8 +13,8 @@
     function __construct($data)
     {
         $this->data = $data;
-        $this->next = NULL;
-        $this->prev = NULL;
+        $this->next = null;
+        $this->prev = null;
     }
     
     public function readNode()--- src/Queue.php
+++ PHP_CodeSniffer
@@ -5,21 +5,23 @@
     /* The pointer in a queue always points to last element  */
     private $pointer;
     
-    function __construct(){
+    function __construct()
+    {
         $this->init();
     }
     
-    public function init(){
-        $this->pointer = NULL;
+    public function init()
+    {
+        $this->pointer = null;
     }
     
-    public function add($value,$position = null){
+    public function add($value, $position = null)
+    {
         $newNode = new SingleLinkedListNode($value);
         
-        if($this->isEmpty()){
+        if ($this->isEmpty()) {
             $this->pointer = $newNode;
-        }
-        else{
+        } else {
             $oldLastNode = $this->pointer;
             $this->pointer = $newNode;
             $newNode->next = $oldLastNode;
@@ -27,21 +29,20 @@
         }
     }
     
-    public function getData($position = null){
-        if(!$this->isEmpty())
-        {
+    public function getData($position = null)
+    {
+        if (!$this->isEmpty()) {
             return $this->pointer->readNode();
-        }
-        else{
+        } else {
             return false;
         }
     }
     
-    public function isEmpty(){
-        if($this->pointer == NULL){
+    public function isEmpty()
+    {
+        if ($this->pointer == null) {
             return true;
-        }
-        else{
+        } else {
             return false;
         }
     }
@@ -52,9 +53,8 @@
     {
         $listData = [];
         $currentNode = $this->pointer;
-        if(!$this->isEmpty())
-        {
-            while($currentNode){
+        if (!$this->isEmpty()) {
+            while ($currentNode) {
                 array_push($listData, $currentNode->readNode());
                 $currentNode = $currentNode->next;
             }
@@ -67,15 +67,14 @@
     *
     * @param string $position
     */
-    public function delete($position = null){
-        if(!$this->isEmpty())
-        {
+    public function delete($position = null)
+    {
+        if (!$this->isEmpty()) {
             $nodeToDelete = $this->pointer;
             $this->pointer = $this->pointer->next;
             unset($nodeToDelete);
             return true;
-        }
-        else{
+        } else {
             return false;
         }
     }
@@ -85,25 +84,24 @@
     * @param string $position
     * @param unknown $value
     */
-    public function setData($value,$position = null){
-        if(!$this->isEmpty())
-        {
+    public function setData($value, $position = null)
+    {
+        if (!$this->isEmpty()) {
             $nodeToChange = $this->pointer;
             
             // at node we should implement getter and setter methods for better encapsulation
             $nodeToChange->data = $nodeToChange;
             return true;
-        }
-        else{
+        } else {
             return false;
         }
     }
     
-	/**
-	 * Not implemented because to have a basic queue structure.
-	 * 
-	 * TODO: Need to remove it from interface
-	 * 
+    /**
+     * Not implemented because to have a basic queue structure.
+     *
+     * TODO: Need to remove it from interface
+     *
      * @see \Mtkocak\Algorithms\DataStructureInterface::search()
      */
     public function search($value)
@@ -111,6 +109,4 @@
         // TODO Auto-generated method stub
         
     }
-
-
 }--- src/SingleLinkedList.php
+++ PHP_CodeSniffer
@@ -10,27 +10,32 @@
     
     private $current;
     
-    function __construct(){
+    function __construct()
+    {
         $this->init();
     }
     
-    public function init(){
-        $this->firstNode = NULL;
-        $this->lastNode = NULL;
+    public function init()
+    {
+        $this->firstNode = null;
+        $this->lastNode = null;
         $this->current = $this->firstNode;
         $this->count = 0;
     }
     
-    public function current(){
+    public function current()
+    {
         return $this->current;
     }
     
-    public function next(){
+    public function next()
+    {
         $this->current = $this->current->next;
         return $this->current();
     }
     
-    public function reset(){
+    public function reset()
+    {
         $this->current = $this->firstNode;
         return $this->current;
     }
@@ -38,22 +43,23 @@
     
     /**
      * Single Linked List does not have a prev function, so we cannot use it.
-     * 
+     *
      */
-    public function prev(){
+    public function prev()
+    {
         return false;
     }
     
-    public function add($value){
+    public function add($value)
+    {
         $newNode = new SingleLinkedListNode($value);
         
-        if($this->isEmpty()){
+        if ($this->isEmpty()) {
             $this->firstNode = $newNode;
             $this->lastNode = $newNode;
             $this->count++;
             $this->current = $newNode;
-        }
-        else{
+        } else {
             $this->lastNode->next = $newNode;
             $this->lastNode = &$newNode;
             $this->count++;
@@ -61,41 +67,36 @@
         }
     }
     
-    public function getData($position = NULL){
-        if(!$this->isEmpty() && !isset($position)){
+    public function getData($position = null)
+    {
+        if (!$this->isEmpty() && !isset($position)) {
             return $this->lastNode->readNode();
-        }
-        elseif(!$this->isEmpty())
-        {
+        } elseif (!$this->isEmpty()) {
             $this->reset();
             $currentPosition = 0;
-            if($position == 0){
+            if ($position == 0) {
                 return $this->current->readNode();
             }
-            while($position != $currentPosition)
-            {
-                if(($currentPosition+1)==$position){
+            while ($position != $currentPosition) {
+                if (($currentPosition+1)==$position) {
                     return $this->current->next->readNode();
-                }
-                elseif($this->current->next != NULL)
-                {
+                } elseif ($this->current->next != null) {
                     $this->next();
                     $currentPosition++;
                 }
             }
-        }
-        else{
+        } else {
             return false;
         }
     }
     
-    public function isEmpty(){
+    public function isEmpty()
+    {
         
         // return ($this->firstNode == NULL); // Same as above. Better Readability
-        if($this->firstNode == NULL){
+        if ($this->firstNode == null) {
             return true;
-        }
-        else{
+        } else {
             return false;
         }
     }
@@ -106,8 +107,7 @@
     {
         $listData = array();
         $this->reset();
-        while($this->current != NULL)
-        {
+        while ($this->current != null) {
             array_push($listData, $this->current->readNode());
             $this->current = $this->current->next;
         }
@@ -118,25 +118,25 @@
     *
     * @param unknown $value
      */
-     public function search($value){
+     public function search($value)
+     {
          $listData = array();
          $this->reset();
          $position = 0;
-         if($this->isEmpty()){
-             return false;
-         }
+        if ($this->isEmpty()) {
+            return false;
+        }
          
-         if($this->current->data == $value){
-             return 0;
-         }
-         while($this->current->data != $value)
-         {
-             if($this->current->next->data==$value){
-                  return $position+1;
-             }
-             $this->next();
-             $position++;
-         }
+        if ($this->current->data == $value) {
+            return 0;
+        }
+        while ($this->current->data != $value) {
+            if ($this->current->next->data==$value) {
+                 return $position+1;
+            }
+            $this->next();
+            $position++;
+        }
          return false;
      }
     
@@ -144,83 +144,72 @@
     *
     * @param string $position
     */
-    public function delete($position = NULL){
-        if(!$this->isEmpty() && !isset($position)){
-              $this->reset();
-              while($this->current->next != NULL){
-                  if($this->current->next->next == NULL){
-                      $nextToDelete = $this->current->next;
-                      unset($nextToDelete);
-                      $this->lastNode = $this->current;
-                      $this->current->next == NULL;
-                      return true;
-                  }
-                  $this->next();
-              }
-        }
-        elseif(!$this->isEmpty())
+        public function delete($position = null)
         {
-            $this->reset();
-            $currentPosition = 0;
-            if($position == 0){
-                $newFirstNode = $this->firstNode->next;
-                unset($this->firstNode);
-                $this->firstNode = $newFirstNode;
-                return true;
-            }
-            while($position != $currentPosition)
-            {
-                if(($currentPosition+1)==$position){
-                    $newNext = $this->current->next;
-                    unset ($this->current);
+            if (!$this->isEmpty() && !isset($position)) {
+                  $this->reset();
+                while ($this->current->next != null) {
+                    if ($this->current->next->next == null) {
+                        $nextToDelete = $this->current->next;
+                        unset($nextToDelete);
+                        $this->lastNode = $this->current;
+                        $this->current->next == null;
+                        return true;
+                    }
+                    $this->next();
+                }
+            } elseif (!$this->isEmpty()) {
+                $this->reset();
+                $currentPosition = 0;
+                if ($position == 0) {
+                    $newFirstNode = $this->firstNode->next;
+                    unset($this->firstNode);
+                    $this->firstNode = $newFirstNode;
                     return true;
                 }
-                elseif($this->current->next != NULL)
-                {
-                    $this->next();
-                    $currentPosition++;
+                while ($position != $currentPosition) {
+                    if (($currentPosition+1)==$position) {
+                        $newNext = $this->current->next;
+                        unset ($this->current);
+                        return true;
+                    } elseif ($this->current->next != null) {
+                        $this->next();
+                        $currentPosition++;
+                    }
                 }
+            } else {
+                return false;
             }
         }
-        else{
-            return false;
-        } 
-    }
     
     /**
     *
     * @param string $position
     * @param unknown $value
     */
-    public function setData($value,$position = NULL){
-        if(!$this->isEmpty() && !isset($position)){
-            $this->lastNode->data = $value;
-            return true;
-        }
-        elseif(!$this->isEmpty())
+        public function setData($value, $position = null)
         {
-            $this->reset();
-            $currentPosition = 0;
-            if($position == 0){
-                $this->current->data = $value;
+            if (!$this->isEmpty() && !isset($position)) {
+                $this->lastNode->data = $value;
                 return true;
-            }
-            while($position != $currentPosition)
-            {
-                if(($currentPosition+1)==$position){
-                    $this->current->next->data = $value;
+            } elseif (!$this->isEmpty()) {
+                $this->reset();
+                $currentPosition = 0;
+                if ($position == 0) {
+                    $this->current->data = $value;
                     return true;
                 }
-                elseif($this->current->next != NULL)
-                {
-                    $this->next();
-                    $currentPosition++;
+                while ($position != $currentPosition) {
+                    if (($currentPosition+1)==$position) {
+                        $this->current->next->data = $value;
+                        return true;
+                    } elseif ($this->current->next != null) {
+                        $this->next();
+                        $currentPosition++;
+                    }
                 }
+            } else {
+                return false;
             }
         }
-        else{
-            return false;
-        }
-    }
-
 }--- src/SingleLinkedListNode.php
+++ PHP_CodeSniffer
@@ -13,7 +13,7 @@
     function __construct($data)
     {
         $this->data = $data;
-        $this->next = NULL;
+        $this->next = null;
     }
     
     public function readNode()--- src/Stack.php
+++ PHP_CodeSniffer
@@ -19,12 +19,12 @@
 
     public function init()
     {
-        $this->pointer = NULL;
+        $this->pointer = null;
     }
 
     public function isEmpty()
     {
-        if ($this->pointer == NULL) {
+        if ($this->pointer == null) {
             return true;
         } else {
             return false;
@@ -34,7 +34,7 @@
     /**
      * We can use single linked list node.
      *
-     * @param unknown $value            
+     * @param unknown $value
      */
     public function add($value)
     {
@@ -67,7 +67,7 @@
     /**
      * Similar to listAll function
      *
-     * @param unknown $value            
+     * @param unknown $value
      */
     public function search($value)
     {
@@ -86,7 +86,7 @@
         return false;
     }
 
-    public function delete($position = NULL)
+    public function delete($position = null)
     {
         $currentPosition = 0;
         $currentNode = $this->pointer;
@@ -115,7 +115,7 @@
         }
     }
 
-    public function setData($value, $position = NULL)
+    public function setData($value, $position = null)
     {
         $currentPosition = 0;
         $currentNode = $this->pointer;
@@ -141,14 +141,14 @@
         }
     }
 
-    public function getData($position = NULL)
+    public function getData($position = null)
     {
         $currentPosition = 0;
         $currentNode = $this->pointer;
         // Select which node to delete
         if (! $this->isEmpty() && isset($position)) {
             // I don't like repeated code
-            if($position==0){
+            if ($position==0) {
                 $nodeToGetValue = $this->pointer;
                 return $nodeToGetValue->data;
             }--- src/Tree.php
+++ PHP_CodeSniffer
@@ -13,7 +13,7 @@
 
     public function init()
     {
-        $this->root = NULL;
+        $this->root = null;
     }
 
     /**
@@ -27,9 +27,9 @@
         // if this is empty, add value as root
         if ($this->isEmpty()) {
             $this->root = $newNode;
-        }        // if this is not empty and no position add children to root
+        } // if this is not empty and no position add children to root
         elseif (! isset($position)) {
-            if ($this->root->children == NULL) {
+            if ($this->root->children == null) {
                 $this->root->children = $newNode;
                 return true;
             } else {
@@ -39,7 +39,7 @@
             }
         } else {
             $nodeToAddChildren = $this->getNodeByPosition($position);
-            if ($nodeToAddChildren->children == NULL) {
+            if ($nodeToAddChildren->children == null) {
                 $nodeToAddChildren->children = $newNode;
                 return true;
             } else {
@@ -115,7 +115,7 @@
         }
         if (! $this->isEmpty() && isset($position)) {
             $nodeToGetData = $this->getNodeByPosition($position);
-            if ($nodeToGetData != NULL) {
+            if ($nodeToGetData != null) {
                 return $nodeToGetData->readNode();
             }
         }
@@ -124,32 +124,31 @@
 
     public function isEmpty()
     {
-        if ($this->root == NULL) {
+        if ($this->root == null) {
             return true;
         } else {
             return false;
         }
     }
 
-    public function traverse(TreeNode $subtree,$position = null)
+    public function traverse(TreeNode $subtree, $position = null)
     {
            $array = [];
            $array[$position]['value']= $subtree->readNode();
            // array[0][1] array[0][2] array[0][3] First degree of children
-           if($subtree->children!=null)
-           {
-               $subtree = $subtree->children;
-               $array[$position] = $this->traverse($subtree,++$position);
-           }
-           if($subtree->right!=null){
-               $right = 1;
-               $current=$subtree;
-               while($current){
-                   $array[$position][$right]['value'] = $current->readNode();
-                   $current=$current->right;
-                   $right++;
-               }
-           }
+        if ($subtree->children!=null) {
+            $subtree = $subtree->children;
+            $array[$position] = $this->traverse($subtree, ++$position);
+        }
+        if ($subtree->right!=null) {
+            $right = 1;
+            $current=$subtree;
+            while ($current) {
+                $array[$position][$right]['value'] = $current->readNode();
+                $current=$current->right;
+                $right++;
+            }
+        }
            return $array;
     }
 
@@ -163,14 +162,14 @@
      */
     public function listAll()
     {
-        return var_dump($this->traverse($this->root,0));
+        return var_dump($this->traverse($this->root, 0));
     }
 
     public function delete($position = null)
     {
         if (! $this->isEmpty() && isset($position)) {
             $nodeToDelete = $this->getNodeByPosition($position);
-            if ($nodeToDelete != NULL) {
+            if ($nodeToDelete != null) {
                 unset ($nodeToDelete);
                 return true;
             }
@@ -185,7 +184,7 @@
         }
         if (! $this->isEmpty() && isset($position)) {
             $nodeToSetData = $this->getNodeByPosition($position);
-            if ($nodeToSetData != NULL) {
+            if ($nodeToSetData != null) {
                  $nodeToSetData->data = $value;
                  return true;
             }
@@ -199,22 +198,23 @@
         $subtree = $this->root;
         $array = [];
         $array[$position]['value']= $subtree->readNode();
-        if($subtree->readNode() == $value);
+        if ($subtree->readNode() == $value) {
+        }
         {
             return true;
         }
         // array[0][1] array[0][2] array[0][3] First degree of children
-        if($subtree->children!=null)
-        {
+        if ($subtree->children!=null) {
             $subtree = $subtree->children;
-            $array[$position] = $this->traverse($subtree,++$position);
+            $array[$position] = $this->traverse($subtree, ++$position);
         }
-        if($subtree->right!=null){
+        if ($subtree->right!=null) {
             $right = 1;
             $current=$subtree;
-            while($current){
+            while ($current) {
                 $array[$position][$right]['value'] = $current->readNode();
-                if($current->readNode() == $value);
+                if ($current->readNode() == $value) {
+                }
                 {
                     return true;
                 }--- src/TreeNode.php
+++ PHP_CodeSniffer
@@ -14,8 +14,8 @@
     function __construct($data)
     {
         $this->data = $data;
-        $this->children = NULL;
-        $this->right = NULL;
+        $this->children = null;
+        $this->right = null;
     }
     
     public function readNode()--- tests/DoubleLinkedListTest.php
+++ PHP_CodeSniffer
@@ -50,110 +50,127 @@
         $this->assertTrue($this->doubleLinkedList->listAll() == $dataArray);
     }
     
-    public function testGoToPosition(){
+    public function testGoToPosition()
+    {
         $this->testAddAnotherData();
         $this->testAddAnotherData();
         $this->assertTrue($this->doubleLinkedList->goToPosition(3));
     }
     
-    public function testGetPosition(){
+    public function testGetPosition()
+    {
         $this->testAddAnotherData();
         //var_dump($this->doubleLinkedList->listAll());
         $dataToCheck = $this->doubleLinkedList->getData();
         //var_dump($dataToCheck);
         $this->testAddAnotherData();
-        $this->assertEquals($this->doubleLinkedList->getData(1),$dataToCheck);
+        $this->assertEquals($this->doubleLinkedList->getData(1), $dataToCheck);
     }
     
-    public function testGetFirstPosition(){
+    public function testGetFirstPosition()
+    {
         $this->testAddData();
         $dataToCheck = $this->doubleLinkedList->getData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->doubleLinkedList->getData(0),$dataToCheck);
+        $this->assertEquals($this->doubleLinkedList->getData(0), $dataToCheck);
     }
     
-    public function testGetLastPosition(){
+    public function testGetLastPosition()
+    {
         $this->testAddAnotherData();
         $this->testAddAnotherData();
         $dataToCheck = $this->doubleLinkedList->getData();
-        $this->assertEquals($this->doubleLinkedList->getData(3),$dataToCheck);
+        $this->assertEquals($this->doubleLinkedList->getData(3), $dataToCheck);
     }
     
-    public function testGetEmptyPosition(){
-        $this->assertEquals($this->doubleLinkedList->getData(1),NULL);
+    public function testGetEmptyPosition()
+    {
+        $this->assertEquals($this->doubleLinkedList->getData(1), null);
     }
     
-    public function testSearchEmpty(){
+    public function testSearchEmpty()
+    {
         $dataToSearch = $this->generateData();
-        $this->assertEquals($this->doubleLinkedList->search($dataToSearch),false);
+        $this->assertEquals($this->doubleLinkedList->search($dataToSearch), false);
     }
     
-    public function testSearchFirst(){
+    public function testSearchFirst()
+    {
         $dataToSearch = $this->generateData();
         $this->doubleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->doubleLinkedList->search($dataToSearch),0);
+        $this->assertEquals($this->doubleLinkedList->search($dataToSearch), 0);
     }
     
-    public function testSearchLast(){
+    public function testSearchLast()
+    {
         $this->testAddAnotherData();
         //echo $this->doubleLinkedList;
         $dataToSearch = $this->generateData();
         $this->doubleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->doubleLinkedList->search($dataToSearch),2);
+        $this->assertEquals($this->doubleLinkedList->search($dataToSearch), 2);
     }
     
-    public function testSearchMiddle(){
+    public function testSearchMiddle()
+    {
         $this->testAddData();
         $dataToSearch = $this->generateData();
         $this->doubleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->doubleLinkedList->search($dataToSearch),1);
+        $this->assertEquals($this->doubleLinkedList->search($dataToSearch), 1);
     }
     
-    public function testDeleteEmpty(){
-        $this->assertEquals($this->doubleLinkedList->delete(3),false);
+    public function testDeleteEmpty()
+    {
+        $this->assertEquals($this->doubleLinkedList->delete(3), false);
     }
     
-    public function testDeleteLastPosition(){
+    public function testDeleteLastPosition()
+    {
         $this->testAddAnotherData();
         $dataToSearch = $this->generateData();
         $this->doubleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->doubleLinkedList->delete(2),true);
+        $this->assertEquals($this->doubleLinkedList->delete(2), true);
     }
     
-    public function testDeleteLast(){
+    public function testDeleteLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->doubleLinkedList->delete(),true);
+        $this->assertEquals($this->doubleLinkedList->delete(), true);
     }
     
-    public function testDeleteMiddle(){
+    public function testDeleteMiddle()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->doubleLinkedList->delete(1),true);
+        $this->assertEquals($this->doubleLinkedList->delete(1), true);
     }
     
-    public function testSetDataEmpty(){
+    public function testSetDataEmpty()
+    {
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->doubleLinkedList->setData($dataToSet),false);
+        $this->assertEquals($this->doubleLinkedList->setData($dataToSet), false);
     }
     
-    public function testSetDataLastPosition(){
+    public function testSetDataLastPosition()
+    {
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->doubleLinkedList->setData($dataToSet,1),true);
+        $this->assertEquals($this->doubleLinkedList->setData($dataToSet, 1), true);
     }
     
-    public function testSetDataLast(){
+    public function testSetDataLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->doubleLinkedList->setData($dataToSet),true);
+        $this->assertEquals($this->doubleLinkedList->setData($dataToSet), true);
     }
     
-    public function testSetDataMiddle(){
+    public function testSetDataMiddle()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->doubleLinkedList->setData($dataToSet,1),true);
+        $this->assertEquals($this->doubleLinkedList->setData($dataToSet, 1), true);
     }
 }--- tests/QueueTest.php
+++ PHP_CodeSniffer
@@ -51,34 +51,39 @@
         //var_dump($dataArray);
         $this->assertTrue($this->queue->listAll() == $dataArray);
     }
-    public function testGetData(){
+    public function testGetData()
+    {
         $this->testAddAnotherData();
         $this->testAddAnotherData();
         $dataToCheck = $this->queue->getData();
-        $this->assertEquals($this->queue->getData(),$dataToCheck);
+        $this->assertEquals($this->queue->getData(), $dataToCheck);
     }
     
     
-    public function testDeleteEmpty(){
-        $this->assertEquals($this->queue->delete(3),false);
+    public function testDeleteEmpty()
+    {
+        $this->assertEquals($this->queue->delete(3), false);
     }
     
-    public function testDeleteLast(){
+    public function testDeleteLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->queue->delete(),true);
+        $this->assertEquals($this->queue->delete(), true);
     }
     
     
-    public function testSetDataEmpty(){
+    public function testSetDataEmpty()
+    {
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->queue->setData($dataToSet),false);
+        $this->assertEquals($this->queue->setData($dataToSet), false);
     }
     
-    public function testSetDataLast(){
+    public function testSetDataLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->queue->setData($dataToSet),true);
+        $this->assertEquals($this->queue->setData($dataToSet), true);
     }
 }--- tests/SingleLinkedListTest.php
+++ PHP_CodeSniffer
@@ -47,101 +47,117 @@
         ];
         $this->assertTrue($this->singleLinkedList->listAll() == $dataArray);
     }
-    public function testGetPosition(){
+    public function testGetPosition()
+    {
         $this->testAddAnotherData();
         $dataToCheck = $this->singleLinkedList->getData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->singleLinkedList->getData(1),$dataToCheck);
+        $this->assertEquals($this->singleLinkedList->getData(1), $dataToCheck);
     }
     
-    public function testGetFirstPosition(){
+    public function testGetFirstPosition()
+    {
         $this->testAddData();
         $dataToCheck = $this->singleLinkedList->getData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->singleLinkedList->getData(0),$dataToCheck);
+        $this->assertEquals($this->singleLinkedList->getData(0), $dataToCheck);
     }
     
-    public function testGetLastPosition(){
+    public function testGetLastPosition()
+    {
         $this->testAddAnotherData();
         $this->testAddAnotherData();
         $dataToCheck = $this->singleLinkedList->getData();
-        $this->assertEquals($this->singleLinkedList->getData(3),$dataToCheck);
+        $this->assertEquals($this->singleLinkedList->getData(3), $dataToCheck);
     }
     
-    public function testGetEmptyPosition(){
-        $this->assertEquals($this->singleLinkedList->getData(1),NULL);
+    public function testGetEmptyPosition()
+    {
+        $this->assertEquals($this->singleLinkedList->getData(1), null);
     }
     
-    public function testSearchEmpty(){
+    public function testSearchEmpty()
+    {
         $dataToSearch = $this->generateData();
-        $this->assertEquals($this->singleLinkedList->search($dataToSearch),false);
+        $this->assertEquals($this->singleLinkedList->search($dataToSearch), false);
     }
     
-    public function testSearchFirst(){
+    public function testSearchFirst()
+    {
         $dataToSearch = $this->generateData();
         $this->singleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->singleLinkedList->search($dataToSearch),0);
+        $this->assertEquals($this->singleLinkedList->search($dataToSearch), 0);
     }
     
-    public function testSearchLast(){
+    public function testSearchLast()
+    {
         $this->testAddAnotherData();
         $dataToSearch = $this->generateData();
         $this->singleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->singleLinkedList->search($dataToSearch),2);
+        $this->assertEquals($this->singleLinkedList->search($dataToSearch), 2);
     }
     
-    public function testSearchMiddle(){
+    public function testSearchMiddle()
+    {
         $this->testAddData();
         $dataToSearch = $this->generateData();
         $this->singleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->singleLinkedList->search($dataToSearch),1);
+        $this->assertEquals($this->singleLinkedList->search($dataToSearch), 1);
     }
     
-    public function testDeleteEmpty(){
-        $this->assertEquals($this->singleLinkedList->delete(3),false);
+    public function testDeleteEmpty()
+    {
+        $this->assertEquals($this->singleLinkedList->delete(3), false);
     }
     
-    public function testDeleteLastPosition(){
+    public function testDeleteLastPosition()
+    {
         $this->testAddAnotherData();
         $dataToSearch = $this->generateData();
         $this->singleLinkedList->add($dataToSearch);
-        $this->assertEquals($this->singleLinkedList->delete(2),true);
+        $this->assertEquals($this->singleLinkedList->delete(2), true);
     }
     
-    public function testDeleteLast(){
+    public function testDeleteLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->singleLinkedList->delete(),true);
+        $this->assertEquals($this->singleLinkedList->delete(), true);
     }
     
-    public function testDeleteMiddle(){
+    public function testDeleteMiddle()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->singleLinkedList->delete(1),true);
+        $this->assertEquals($this->singleLinkedList->delete(1), true);
     }
     
-    public function testSetDataEmpty(){
+    public function testSetDataEmpty()
+    {
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->singleLinkedList->setData($dataToSet),false);
+        $this->assertEquals($this->singleLinkedList->setData($dataToSet), false);
     }
     
-    public function testSetDataLastPosition(){
+    public function testSetDataLastPosition()
+    {
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->singleLinkedList->setData($dataToSet,1),true);
+        $this->assertEquals($this->singleLinkedList->setData($dataToSet, 1), true);
     }
     
-    public function testSetDataLast(){
+    public function testSetDataLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->singleLinkedList->setData($dataToSet),true);
+        $this->assertEquals($this->singleLinkedList->setData($dataToSet), true);
     }
     
-    public function testSetDataMiddle(){
+    public function testSetDataMiddle()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->singleLinkedList->setData($dataToSet,1),true);
+        $this->assertEquals($this->singleLinkedList->setData($dataToSet, 1), true);
     }
 }--- tests/StackTest.php
+++ PHP_CodeSniffer
@@ -52,104 +52,120 @@
         //var_dump($dataArray);
         $this->assertTrue($this->stack->listAll() == $dataArray);
     }
-    public function testGetPosition(){
+    public function testGetPosition()
+    {
         $this->testAddAnotherData();
         $dataToCheck = $this->stack->getData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->stack->getData(2),$dataToCheck);
+        $this->assertEquals($this->stack->getData(2), $dataToCheck);
     }
     
-    public function testGetFirstPosition(){
+    public function testGetFirstPosition()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToCheck = $this->stack->getData();
-        $this->assertEquals($this->stack->getData(0),$dataToCheck);
+        $this->assertEquals($this->stack->getData(0), $dataToCheck);
     }
     
-    public function testGetLastPosition(){
+    public function testGetLastPosition()
+    {
         $this->testAddAnotherData();
         $this->testAddAnotherData();
         $dataToCheck = $this->stack->getData();
-        $this->assertEquals($this->stack->getData(0),$dataToCheck);
+        $this->assertEquals($this->stack->getData(0), $dataToCheck);
     }
     
-    public function testGetEmptyPosition(){
-        $this->assertEquals($this->stack->getData(1),NULL);
+    public function testGetEmptyPosition()
+    {
+        $this->assertEquals($this->stack->getData(1), null);
     }
     
-    public function testSearchEmpty(){
+    public function testSearchEmpty()
+    {
         $dataToSearch = $this->generateData();
-        $this->assertEquals($this->stack->search($dataToSearch),false);
+        $this->assertEquals($this->stack->search($dataToSearch), false);
     }
     
-    public function testSearchFirst(){
+    public function testSearchFirst()
+    {
         $dataToSearch = $this->generateData();
         $this->stack->add($dataToSearch);
-        $this->assertEquals($this->stack->search($dataToSearch),0);
+        $this->assertEquals($this->stack->search($dataToSearch), 0);
     }
     
-    public function testSearchLast(){
+    public function testSearchLast()
+    {
         $this->testAddAnotherData();
         $dataToSearch = $this->generateData();
         $this->stack->add($dataToSearch);
         // Last added element is always first elemen in stack LIFO
         // Last in first out.
-        $this->assertEquals($this->stack->search($dataToSearch),0);
+        $this->assertEquals($this->stack->search($dataToSearch), 0);
     }
     
-    public function testSearchMiddle(){
+    public function testSearchMiddle()
+    {
         $this->testAddData();
         $dataToSearch = $this->generateData();
         $this->stack->add($dataToSearch);
         $this->testAddData();
-        $this->assertEquals($this->stack->search($dataToSearch),1);
+        $this->assertEquals($this->stack->search($dataToSearch), 1);
     }
     
-    public function testDeleteEmpty(){
-        $this->assertEquals($this->stack->delete(3),false);
+    public function testDeleteEmpty()
+    {
+        $this->assertEquals($this->stack->delete(3), false);
     }
     
-    public function testDeleteLastPosition(){
+    public function testDeleteLastPosition()
+    {
         $this->testAddAnotherData();
         $dataToSearch = $this->generateData();
         $this->stack->add($dataToSearch);
-        $this->assertEquals($this->stack->delete(2),true);
+        $this->assertEquals($this->stack->delete(2), true);
     }
     
-    public function testDeleteLast(){
+    public function testDeleteLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->stack->delete(),true);
+        $this->assertEquals($this->stack->delete(), true);
     }
     
-    public function testDeleteMiddle(){
+    public function testDeleteMiddle()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
-        $this->assertEquals($this->stack->delete(1),true);
+        $this->assertEquals($this->stack->delete(1), true);
     }
     
-    public function testSetDataEmpty(){
+    public function testSetDataEmpty()
+    {
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->stack->setData($dataToSet),false);
+        $this->assertEquals($this->stack->setData($dataToSet), false);
     }
     
-    public function testSetDataLastPosition(){
+    public function testSetDataLastPosition()
+    {
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->stack->setData($dataToSet,1),true);
+        $this->assertEquals($this->stack->setData($dataToSet, 1), true);
     }
     
-    public function testSetDataLast(){
+    public function testSetDataLast()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->stack->setData($dataToSet),true);
+        $this->assertEquals($this->stack->setData($dataToSet), true);
     }
     
-    public function testSetDataMiddle(){
+    public function testSetDataMiddle()
+    {
         $this->testAddData();
         $this->testAddAnotherData();
         $dataToSet = $this->generateData();
-        $this->assertEquals($this->stack->setData($dataToSet,1),true);
+        $this->assertEquals($this->stack->setData($dataToSet, 1), true);
     }
 }--- tests/TreeTest.php
+++ PHP_CodeSniffer
@@ -31,30 +31,35 @@
         return $data;
     }
     
-    public function testGoToLastSibling(){
+    public function testGoToLastSibling()
+    {
         
-    $lastSiblingToCheck = $this->tree->goToLastSibling($this->tree->root->children);
-    $this->assertTrue($lastSiblingToCheck->readNode() == 4);
+        $lastSiblingToCheck = $this->tree->goToLastSibling($this->tree->root->children);
+        $this->assertTrue($lastSiblingToCheck->readNode() == 4);
     }
     
-    public function testGoToLastNumberedSibling(){
+    public function testGoToLastNumberedSibling()
+    {
         $lastNumberedSiblingToCheckValue = $this->tree->root->children->right->right->readNode();
-        $lastNumberedSiblingToCheck = $this->tree->goToLastNumberedSibling($this->tree->root->children,3);
+        $lastNumberedSiblingToCheck = $this->tree->goToLastNumberedSibling($this->tree->root->children, 3);
         $this->assertTrue($lastNumberedSiblingToCheck->readNode() == $lastNumberedSiblingToCheckValue);
     }
     
     
-    public function testGoToLastChild(){
+    public function testGoToLastChild()
+    {
         $lastChildrenToCheck = $this->tree->goToLastChild($this->tree->root);
         $this->assertTrue($lastChildrenToCheck->readNode() == '1.1.1');
     }
     
-    public function testGoToLastNumberedChild(){
-        $lastChildrenToCheck = $this->tree->goToLastNumberedChild($this->tree->root,3);
+    public function testGoToLastNumberedChild()
+    {
+        $lastChildrenToCheck = $this->tree->goToLastNumberedChild($this->tree->root, 3);
         $this->assertTrue($lastChildrenToCheck->readNode() == '1.1.1');
     }
     
-    public function testGetNodeByPositionZero(){
+    public function testGetNodeByPositionZero()
+    {
         $node = $this->tree->getNodeByPosition('1.2.1');
         
         $this->assertTrue('1.2.1' == $node->readNode());
@@ -73,7 +78,7 @@
     {
         $this->testAddData();
         $anotherData = $this->generateData();
-        $this->tree->add($anotherData,'1');
+        $this->tree->add($anotherData, '1');
         $lastData = $this->tree->goToLastSibling($this->tree->root->children);
     
         $this->assertTrue($anotherData == $lastData->readNode());
@@ -84,25 +89,27 @@
         $firstData = $this->generateData();
         $secondData = $this->generateData();
         $this->tree->add($firstData);
-        $this->tree->add($secondData,'1');
+        $this->tree->add($secondData, '1');
         //print_r($this->tree);
         //print_r($this->tree->listAll());
     }
     
-    public function testSearch(){
+    public function testSearch()
+    {
         $dataToSearch = $this->generateData();
         $this->tree->add($dataToSearch);
-        $this->assertEquals($this->tree->search($dataToSearch),true);
+        $this->assertEquals($this->tree->search($dataToSearch), true);
     }
     
-    public function testDelete(){
-        $this->assertEquals($this->tree->delete(3),true);
+    public function testDelete()
+    {
+        $this->assertEquals($this->tree->delete(3), true);
     }
     
 
     
-    public function testSetDataEmpty(){
-        $this->assertEquals($this->tree->setData('new value','3'),true);
+    public function testSetDataEmpty()
+    {
+        $this->assertEquals($this->tree->setData('new value', '3'), true);
     }
-
 }
