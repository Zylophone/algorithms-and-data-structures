--- src/BinarySearchTree.php
+++ PHP_CodeSniffer
@@ -11,14 +11,14 @@
             $current = $this->root();
             while ($current) {
                 if ($value < $current->get()) {
-                    if ($current->left() == NULL) {
+                    if ($current->left() == null) {
                         $current->left($newNode);
                         return true;
                     } else {
                         $current = $current->left();
                     }
                 } elseif ($value > $current->get()) {
-                    if ($current->right() == NULL) {
+                    if ($current->right() == null) {
                         $current->right($newNode);
                         return true;
                     } else {
@@ -47,20 +47,20 @@
 
     public function delete(TreeNodeInterface $node)
     {
-        if ($node->left() == NULL && $node->right() == NULL) {
-            $node = NULL;
-        } elseif ($node->left() != NULL && $node->right() == NULL) {
+        if ($node->left() == null && $node->right() == null) {
+            $node = null;
+        } elseif ($node->left() != null && $node->right() == null) {
             $node = $node->left();
-        } elseif ($node->left() == NULL && $node->right() != NULL) {
+        } elseif ($node->left() == null && $node->right() != null) {
             $nodeToDelete = $node;
             $node = $node->right();
             unset($nodeToDelete);
         } else {
             $predecessor = $this->predecessor($node);
             $successor = $this->successor($node);
-            if ($predecessor != NULL && $predecessor != false) {
+            if ($predecessor != null && $predecessor != false) {
                 $node = $predecessor;
-            } elseif ($successor != NULL && $successor != false) {
+            } elseif ($successor != null && $successor != false) {
                 $node = $successor;
             }
         }
@@ -69,11 +69,11 @@
     public function deleteValue($value)
     {
         $current = $this->root();
-        $parent = NULL;
-        $direction = NULL;
-        while($current){
+        $parent = null;
+        $direction = null;
+        while ($current) {
             if ($value < $current->get()) {
-                if ($current->left() != NULL) {
+                if ($current->left() != null) {
                     $parent = $current;
                     $direction = 'left';
                     $current = $current->left();
@@ -81,7 +81,7 @@
                     return false;
                 }
             } elseif ($value > $current->get()) {
-                if ($current->right() != NULL) {
+                if ($current->right() != null) {
                     $parent = $current;
                     $direction = 'right';
                     $current = $current->right();
@@ -89,47 +89,46 @@
                     return false;
                 }
             } else {
-                if($current->left()==NULL && $current->right()==NULL){
-                    if($direction=='right'){
-                        $parent->right = NULL;
+                if ($current->left()==null && $current->right()==null) {
+                    if ($direction=='right') {
+                        $parent->right = null;
                     }
-                    if($direction=='left'){
-                        $parent->left = NULL;
+                    if ($direction=='left') {
+                        $parent->left = null;
                     }
-                }elseif($current->left()!=NULL && $current->right()==NULL){
-                    if($direction=='right'){
+                } elseif ($current->left()!=null && $current->right()==null) {
+                    if ($direction=='right') {
                         $parent->right = $current->left();
                     }
-                    if($direction=='left'){
+                    if ($direction=='left') {
                         $parent->left = $current->left();
                     }
-                }elseif($current->left()==NULL && $current->right()!=NULL){
-                    if($direction=='right'){
+                } elseif ($current->left()==null && $current->right()!=null) {
+                    if ($direction=='right') {
                         $parent->right = $current->right();
                     }
-                    if($direction=='left'){
+                    if ($direction=='left') {
                         $parent->left = $current->right();
                     }
-                }
-                elseif($current->left()!=NULL && $current->right()!=NULL){
-                    if($direction=='right'){
+                } elseif ($current->left()!=null && $current->right()!=null) {
+                    if ($direction=='right') {
                         $parent->right = $current->right();
                     }
-                    if($direction=='left'){
+                    if ($direction=='left') {
                         $parent->left = $current->left();
                     }
                     
                     $predecessor = $this->predecessor($current);
                     $successor = $this->successor($current);
-                    if ($predecessor != NULL && $predecessor != false) {
+                    if ($predecessor != null && $predecessor != false) {
                         $current = $predecessor;
-                    } elseif ($successor != NULL && $successor != false) {
+                    } elseif ($successor != null && $successor != false) {
                         $current = $successor;
                     }
                     
                 }
                 return true;
-            }  
+            }
         }
         return false;
     }
@@ -139,13 +138,13 @@
         $current = $this->root();
         while ($current) {
             if ($value < $current->get()) {
-                if ($current->left() != NULL) {
+                if ($current->left() != null) {
                     $current = $current->left();
                 } else {
                     return false;
                 }
             } elseif ($value > $current->get()) {
-                if ($current->right() != NULL) {
+                if ($current->right() != null) {
                     $current = $current->right();
                 } else {
                     return false;
--- src/BinarySearchTreeNode.php
+++ PHP_CodeSniffer
@@ -7,14 +7,13 @@
 
     public function validate()
     {
-        if ($this->data != NULL) {
-            if ($this->left() != NULL && $this->left() > $this->get()) {
+        if ($this->data != null) {
+            if ($this->left() != null && $this->left() > $this->get()) {
                 return false;
             }
-            if ($this->right() != NULL < $this->get()) {
+            if ($this->right() != null < $this->get()) {
                 return false;
             }
         }
     }
 }
-
--- src/BinaryTree.php
+++ PHP_CodeSniffer
@@ -8,10 +8,10 @@
 
     private $root;
 
-    public function root(TreeNodeInterface $node = NULL)
+    public function root(TreeNodeInterface $node = null)
     {
         if (isset($node)) {
-            if ($this->root != NULL) {
+            if ($this->root != null) {
                 throw new Exception("Node Not Empty");
             } else {
                 $this->root = $node;
@@ -23,7 +23,7 @@
 
     function __construct()
     {
-        $this->root = NULL;
+        $this->root = null;
     }
 
     abstract public function add($value);
@@ -32,18 +32,18 @@
 
     /**
      *
-     * @param DataStructureNode $node            
+     * @param DataStructureNode $node
      * @return boolean|unknown
      */
     public function predecessor(TreeNodeInterface $node)
     {
         // Go Left and after right most element
-        if ($node->left() == NULL) {
+        if ($node->left() == null) {
             return false;
         } else {
             $current = $node->left();
             while ($current) {
-                if($current->right()==NULL){
+                if ($current->right()==null) {
                     return $current;
                 }
                 $current = $current->right();
@@ -55,12 +55,12 @@
     public function successor(TreeNodeInterface $node)
     {
         // Go right and after left most element
-        if ($node->right() == NULL) {
+        if ($node->right() == null) {
             return false;
         } else {
             $current = $node->right();
             while ($current) {
-                if($current->left()==NULL){
+                if ($current->left()==null) {
                     return $current;
                 }
                 $current = $current->left();
@@ -71,7 +71,7 @@
 
     public function isEmpty()
     {
-        if ($this->root == NULL) {
+        if ($this->root == null) {
             return true;
         } else {
             return false;
@@ -138,10 +138,12 @@
                 break;
             case 'inOrder':
                 array_push($listArray, $node->readNode());
-                while (! $stack->isEmpty()) {}
+                while (! $stack->isEmpty()) {
+                }
                 break;
             case 'preOrder':
-                while (! $stack->isEmpty()) {}
+                while (! $stack->isEmpty()) {
+                }
                 break;
         }
         return $listArray;
@@ -167,8 +169,6 @@
     }
 
     public function postOrder(TreeNodeInterface $node = null)
-    
-    // first print self, recursive
     {
         if (!isset($node)) {
             $node = $this->root();
--- src/BinaryTreeNode.php
+++ PHP_CodeSniffer
@@ -15,18 +15,17 @@
     function __construct($data)
     {
         $this->data = $data;
-        $this->left = NULL;
-        $this->right = NULL;
+        $this->left = null;
+        $this->right = null;
     }
 
-    public function left(TreeNodeInterface $node = NULL)
+    public function left(TreeNodeInterface $node = null)
     {
         if (isset($node)) {
-            if ($this->left != NULL) {
+            if ($this->left != null) {
                 throw new Exception("Node Not Empty");
             } else {
-                if($node==NULL){
-                    
+                if ($node==null) {
                     echo 'yarrak';
                 }
                 $this->left = $node;
@@ -35,10 +34,10 @@
         return $this->left;
     }
 
-    public function right(TreeNodeInterface $node = NULL)
+    public function right(TreeNodeInterface $node = null)
     {
         if (isset($node)) {
-            if ($this->right != NULL) {
+            if ($this->right != null) {
                 throw new Exception("Node Not Empty");
             } else {
                 $this->right = $node;
--- src/DataStructure.php
+++ PHP_CodeSniffer
@@ -12,5 +12,4 @@
     public function delete();
     
     public function isEmpty();
-   
 }
--- src/DataStructureIterator.php
+++ PHP_CodeSniffer
@@ -10,5 +10,4 @@
     public function rewind();
     
     public function key();
-
 }
--- src/DoubleLinkedList.php
+++ PHP_CodeSniffer
@@ -3,14 +3,14 @@
 class DoubleLinkedList extends LinkedList
 {
     
-    public function push($value){
+    public function push($value)
+    {
         $newNode = new DoubleLinkedListNode($value);
         
-        if($this->isEmpty()){
+        if ($this->isEmpty()) {
             $this->bottom($newNode);
             $this->top($newNode);
-        }
-        else{
+        } else {
             $oldTop = $this->top;
             $oldTop->next($newNode);
             $newNode->prev($oldTop);
@@ -22,14 +22,15 @@
     /**
     * Deletes from end, and returns value.
     */
-    public function pop(){
-        if(!$this->isEmpty()){
+    public function pop()
+    {
+        if (!$this->isEmpty()) {
             $this->rewind();
         
             $nodeToDelete = $this->top;
             $value = $nodeToDelete->get();
             $this->top($nodeToDelete->prev());
-            $this->top->next(NULL);
+            $this->top->next(null);
         
             unset($nodeToDelete);
             
@@ -41,16 +42,16 @@
     /**
     * Add to beginning. Reverse of push();
     */
-    public function add($value){
+    public function add($value)
+    {
         $newNode = new DoubleLinkedListNode($value);
         
-        if($this->isEmpty()){
+        if ($this->isEmpty()) {
             $this->bottom = $newNode;
             $this->top = $newNode;
             $this->count++;
             return true;
-        }
-        else{
+        } else {
             $currentBottom = $this->bottom;
             $currentBottom->prev($newNode);
             $this->bottom = &$newNode;
@@ -61,12 +62,13 @@
         return false;
     }
     
-    public function insertAfter($key, $value){
+    public function insertAfter($key, $value)
+    {
         $newNode = new DoubleLinkedListNode($value);
         $this->rewind();
         $currentKey = 0;
-        while($this->current){
-            if($currentKey==$key){
+        while ($this->current) {
+            if ($currentKey==$key) {
                 $next = $this->current->next();
                 $next->prev($newNode);
                 $this->current->next($newNode);
@@ -79,12 +81,13 @@
         return false;
     }
     
-    public function insertBefore($key, $value){
+    public function insertBefore($key, $value)
+    {
         $newNode = new DoubleLinkedListNode($value);
         $this->rewind();
         $currentKey = 0;
-        while($this->current){
-            if($currentKey==$key){
+        while ($this->current) {
+            if ($currentKey==$key) {
                 $prev = $this->current->prev();
                 $prev->next($newNode);
                 $this->current->prev($newNode);
@@ -100,12 +103,13 @@
     /**
     * Delete from beginning. Reverse of pop();
     */
-    public function delete(){
-        if(!$this->isEmpty()){
+    public function delete()
+    {
+        if (!$this->isEmpty()) {
             $nodeToDelete = $this->bottom;
             $value = $nodeToDelete->get();
             $newBottom = $nodeToDelete->next();
-            $newBottom->prev(NULL);
+            $newBottom->prev(null);
             $this->bottom($newBottom);
             return $value;
         }
--- src/DoubleLinkedListNode.php
+++ PHP_CodeSniffer
@@ -12,8 +12,8 @@
     function __construct($data)
     {
         $this->data = $data;
-        $this->next = NULL;
-        $this->prev = NULL;
+        $this->next = null;
+        $this->prev = null;
     }
     
     public function get()
@@ -27,20 +27,18 @@
         return $this->data;
     }
     
-    public function next(DataStructureNode $node = NULL)
+    public function next(DataStructureNode $node = null)
     {
-        if(isset($node))
-        {
-            $this->next = $node;
+        if (isset($node)) {
+        $this->next = $node;
         }
         return $this->next;
     }
     
-    public function prev(DataStructureNode $node = NULL)
+    public function prev(DataStructureNode $node = null)
     {
-        if(isset($node))
-        {
-            $this->prev = $node;
+        if (isset($node)) {
+        $this->prev = $node;
         }
         return $this->prev;
     }
--- src/LinkedList.php
+++ PHP_CodeSniffer
@@ -1,5 +1,6 @@
 <?php
 namespace Mtkocak\DataStructures;
+
 use Exception;
 
 abstract class LinkedList implements DataStructure, Listable, DataStructureIterator
@@ -20,17 +21,17 @@
      */
     protected $current;
 
-    protected $count = NULL;
+    protected $count = null;
 
     public function __construct()
     {
-        $this->top = NULL;
-        $this->bottom = NULL;
+        $this->top = null;
+        $this->bottom = null;
         $this->current = $this->bottom;
         $this->count = $this->count();
     }
 
-    public function top(DataStructureNode $node = NULL)
+    public function top(DataStructureNode $node = null)
     {
         if (isset($node)) {
             $this->top = $node;
@@ -38,7 +39,7 @@
         return $this->top->get();
     }
 
-    public function bottom(DataStructureNode $node = NULL)
+    public function bottom(DataStructureNode $node = null)
     {
         if (isset($node)) {
             $this->bottom = $node;
@@ -68,7 +69,7 @@
 
     public function count()
     {
-        if ($this->count == NULL) {
+        if ($this->count == null) {
             $this->rewind();
             $count = 0;
             while ($this->current) {
@@ -81,10 +82,10 @@
         }
     }
 
-    public function listAll(DataStructureNode $node = NULL)
+    public function listAll(DataStructureNode $node = null)
     {
         $listArray = [];
-        if ($node == NULL) {
+        if ($node == null) {
             $node = $this->bottom;
         }
         if (! $this->isEmpty()) {
@@ -130,7 +131,7 @@
 
     public function isEmpty()
     {
-        if ($this->bottom == NULL) {
+        if ($this->bottom == null) {
             return true;
         } else {
             return false;
--- src/Queue.php
+++ PHP_CodeSniffer
@@ -6,38 +6,40 @@
     private $head;
     private $tail;
     
-    function __construct(){
-        $this->head = NULL;
-        $this->tail = NULL;
+    function __construct()
+    {
+        $this->head = null;
+        $this->tail = null;
     }
     
-    public function enqueue($value){
+    public function enqueue($value)
+    {
         $newNode = new SingleLinkedListNode($value);
-        if($this->isEmpty())
-        {
+        if ($this->isEmpty()) {
             $this->head = $newNode;
             $this->tail = $newNode;
-        }else{
+        } else {
             $currentHead = $this->head;
             $newNode->next($currentHead);
             $this->head($newNode);
         }
     }
     
-    public function dequeue(){
+    public function dequeue()
+    {
         $nodeToDelete = $this->tail;
-        if(!$this->isEmpty()){
+        if (!$this->isEmpty()) {
             $value = $nodeToDelete->get();
             $current = $this->head;
-            if($current->next()==NULL){
-                $this->tail = NULL;
-                $this->head = NULL;
+            if ($current->next()==null) {
+                $this->tail = null;
+                $this->head = null;
                 unset($nodeToDelete);
                 return $value;
             }
-            while($current){
+            while ($current) {
                 // element before last
-                if($current->next()->next()==NULL){
+                if ($current->next()->next()==null) {
                     $this->tail = $current;
                     unset($nodeToDelete);
                     return $value;
@@ -48,15 +50,16 @@
         return false;
     }
     
-    public function peek(){
+    public function peek()
+    {
         return $this->head->get();
     }
     
-    public function isEmpty(){
-        if($this->head == NULL){
+    public function isEmpty()
+    {
+        if ($this->head == null) {
             return true;
-        }
-        else{
+        } else {
             return false;
         }
     }
--- src/SingleLinkedList.php
+++ PHP_CodeSniffer
@@ -3,14 +3,14 @@
 class SingleLinkedList extends LinkedList
 {
     
-    public function push($value){
+    public function push($value)
+    {
         $newNode = new SingleLinkedListNode($value);
         
-        if($this->isEmpty()){
+        if ($this->isEmpty()) {
             $this->bottom($newNode);
             $this->top($newNode);
-        }
-        else{
+        } else {
             $this->top->next($newNode);
             $this->top($newNode);
         }
@@ -20,26 +20,26 @@
     /**
     * Deletes from end, and returns value.
     */
-    public function pop(){
+    public function pop()
+    {
         $this->rewind();
-        $value = NULL;
-        if(!$this->isEmpty()){
-            if($this->current->next()==NULL){
+        $value = null;
+        if (!$this->isEmpty()) {
+            if ($this->current->next()==null) {
                 $nodeToDelete = $this->current;
                 $value = $nodeToDelete->get();
-                $this->top(NULL);
-                $this->bottom(NULL);
+                $this->top(null);
+                $this->bottom(null);
                 unset($nodeToDelete);
                 return $value;
             }
-            while($this->current->next()!=NULL)
-            {
-                if($this->current->next()->next() == NULL){
+            while ($this->current->next()!=null) {
+                if ($this->current->next()->next() == null) {
                     $nextToDelete = $this->current->next();
                     $value = $nextToDelete->get();
                     unset($nextToDelete);
                     $this->top($this->current);
-                    $this->current->next(NULL);
+                    $this->current->next(null);
                 }
             
                 $this->next();
@@ -52,16 +52,16 @@
     /**
     * Add to beginning. Reverse of push();
     */
-    public function add($value){
+    public function add($value)
+    {
         $newNode = new SingleLinkedListNode($value);
         
-        if($this->isEmpty()){
+        if ($this->isEmpty()) {
             $this->bottom = $newNode;
             $this->top = $newNode;
             $this->count++;
             return true;
-        }
-        else{
+        } else {
             $currentBottom = $this->bottom;
             $this->bottom = &$newNode;
             $this->bottom->next($currentBottom);
@@ -71,12 +71,13 @@
         return false;
     }
     
-    public function insertAfter($key, $value){
+    public function insertAfter($key, $value)
+    {
         $newNode = new SingleLinkedListNode($value);
         $this->rewind();
         $currentKey = 0;
-        while($this->current){
-            if($currentKey==$key){
+        while ($this->current) {
+            if ($currentKey==$key) {
                 $next = $this->current->next();
                 $this->current->next($newNode);
                 $newNode->next($next);
@@ -88,12 +89,13 @@
         return false;
     }
     
-    public function insertBefore($key, $value){
+    public function insertBefore($key, $value)
+    {
         $newNode = new SingleLinkedListNode($value);
         $this->rewind();
         $currentKey = 0;
-        while($this->current && $currentKey!=$key){
-            if(($currentKey+1)==$key){
+        while ($this->current && $currentKey!=$key) {
+            if (($currentKey+1)==$key) {
                 $nodeToInsertBefore = $this->current->next();
                 $this->current->next($newNode);
                 $newNode->next($nodeToInsertBefore);
@@ -108,8 +110,9 @@
     /**
     * Delete from beginning. Reverse of pop();
     */
-    public function delete(){
-        if(!$this->isEmpty()){
+    public function delete()
+    {
+        if (!$this->isEmpty()) {
             $nodeToDelete = $this->bottom;
             $value = $nodeToDelete->get();
             $newBottom = $nodeToDelete->next();
--- src/SingleLinkedListNode.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     function __construct($data)
     {
         $this->data = $data;
-        $this->next = NULL;
+        $this->next = null;
     }
     
     public function get()
@@ -23,11 +23,10 @@
         return $this->data;
     }
     
-    public function next(DataStructureNode $node = NULL)
+    public function next(DataStructureNode $node = null)
     {
-        if(isset($node))
-        {
-            $this->next = $node;
+        if (isset($node)) {
+        $this->next = $node;
         }
         return $this->next;
     }
--- src/Stack.php
+++ PHP_CodeSniffer
@@ -8,26 +8,27 @@
 
     function __construct()
     {
-        $this->top = NULL;
-        $this->bottom = NULL;
+        $this->top = null;
+        $this->bottom = null;
     }
 
     public function isEmpty()
     {
-        if ($this->top == NULL) {
+        if ($this->top == null) {
             return true;
         } else {
             return false;
         }
     }
     
-    public function push($value){
+    public function push($value)
+    {
         $newNode = new SingleLinkedListNode($value);
-        if($this->isEmpty()){
+        if ($this->isEmpty()) {
             $this->top = $newNode;
             $this->tbottom = $newNode;
             return true;
-        }else{
+        } else {
             $oldTop = $this->top;
             $this->top = $newNode;
             $newNode->next($oldTop);
@@ -36,19 +37,21 @@
         return false;
     }
     
-    public function pop(){
-        if(!$this->isEmpty()){
+    public function pop()
+    {
+        if (!$this->isEmpty()) {
             $top = $this->top;
             $value = $top->get();
             $this->top = $top->next();
             unset($top);
             return $value;
-        }else{
+        } else {
             return false;
         }
     }
 
-    public function peek(){
+    public function peek()
+    {
         return $this->top->get();
     }
 }
--- src/TreeInterface.php
+++ PHP_CodeSniffer
@@ -4,7 +4,7 @@
 interface TreeInterface
 {
 
-    public function root(TreeNodeInterface $node = NULL);
+    public function root(TreeNodeInterface $node = null);
 
     public function add($value);
 
--- tests/BinarySearchTreeTest.php
+++ PHP_CodeSniffer
@@ -40,7 +40,7 @@
 
     public function testCreateTree()
     {
-        foreach($this->values as $value){
+        foreach ($this->values as $value) {
             $this->binarySearchTree->add($value);
         }
         // Sorts!

