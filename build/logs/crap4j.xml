<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2015-07-02 15:24:37</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>109</methodCount>
    <crapMethodCount>8</crapMethodCount>
    <crapLoad>58</crapLoad>
    <totalCrap>886.91</totalCrap>
    <crapMethodPercent>7.34</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>7.14</crap>
      <complexity>7</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>validate</methodName>
      <methodSignature>validate()</methodSignature>
      <fullMethod>validate()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>delete</methodName>
      <methodSignature>delete(TreeNodeInterface $node)</methodSignature>
      <fullMethod>delete(TreeNodeInterface $node)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>deleteValue</methodName>
      <methodSignature>deleteValue($value)</methodSignature>
      <fullMethod>deleteValue($value)</fullMethod>
      <crap>45.2</crap>
      <complexity>26</complexity>
      <coverage>69.49</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>search</methodName>
      <methodSignature>search($value)</methodSignature>
      <fullMethod>search($value)</fullMethod>
      <crap>7.1</crap>
      <complexity>6</complexity>
      <coverage>68.75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTreeNode</className>
      <methodName>validate</methodName>
      <methodSignature>validate()</methodSignature>
      <fullMethod>validate()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>root</methodName>
      <methodSignature>root(TreeNodeInterface $node = NULL)</methodSignature>
      <fullMethod>root(TreeNodeInterface $node = NULL)</fullMethod>
      <crap>3.03</crap>
      <complexity>3</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>delete</methodName>
      <methodSignature>delete(TreeNodeInterface $node)</methodSignature>
      <fullMethod>delete(TreeNodeInterface $node)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>predecessor</methodName>
      <methodSignature>predecessor(TreeNodeInterface $node)</methodSignature>
      <fullMethod>predecessor(TreeNodeInterface $node)</fullMethod>
      <crap>4.18</crap>
      <complexity>4</complexity>
      <coverage>77.78</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>successor</methodName>
      <methodSignature>successor(TreeNodeInterface $node)</methodSignature>
      <fullMethod>successor(TreeNodeInterface $node)</fullMethod>
      <crap>5.4</crap>
      <complexity>4</complexity>
      <coverage>55.56</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>search</methodName>
      <methodSignature>search($value)</methodSignature>
      <fullMethod>search($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>breadthFirst</methodName>
      <methodSignature>breadthFirst(TreeNodeInterface $node = null)</methodSignature>
      <fullMethod>breadthFirst(TreeNodeInterface $node = null)</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>depthFirsth</methodName>
      <methodSignature>depthFirsth(TreeNodeInterface $node = null, $mode)</methodSignature>
      <fullMethod>depthFirsth(TreeNodeInterface $node = null, $mode)</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>inOrder</methodName>
      <methodSignature>inOrder(TreeNodeInterface $node = null)</methodSignature>
      <fullMethod>inOrder(TreeNodeInterface $node = null)</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>postOrder</methodName>
      <methodSignature>postOrder(TreeNodeInterface $node = null)
    
    // first print self, recursive</methodSignature>
      <fullMethod>postOrder(TreeNodeInterface $node = null)
    
    // first print self, recursive</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>preOrder</methodName>
      <methodSignature>preOrder(TreeNodeInterface $node = null)</methodSignature>
      <fullMethod>preOrder(TreeNodeInterface $node = null)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>left</methodName>
      <methodSignature>left(TreeNodeInterface &amp;$node = NULL)</methodSignature>
      <fullMethod>left(TreeNodeInterface &amp;$node = NULL)</fullMethod>
      <crap>3.04</crap>
      <complexity>3</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>right</methodName>
      <methodSignature>right(TreeNodeInterface &amp;$node = NULL)</methodSignature>
      <fullMethod>right(TreeNodeInterface &amp;$node = NULL)</fullMethod>
      <crap>3.04</crap>
      <complexity>3</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>get</methodName>
      <methodSignature>get()</methodSignature>
      <fullMethod>get()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>set</methodName>
      <methodSignature>set($value)</methodSignature>
      <fullMethod>set($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>insertAfter</methodName>
      <methodSignature>insertAfter($key, $value)</methodSignature>
      <fullMethod>insertAfter($key, $value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>insertBefore</methodName>
      <methodSignature>insertBefore($key, $value)</methodSignature>
      <fullMethod>insertBefore($key, $value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>offsetUnset</methodName>
      <methodSignature>offsetUnset(  $offset )</methodSignature>
      <fullMethod>offsetUnset(  $offset )</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete()</methodSignature>
      <fullMethod>delete()</fullMethod>
      <crap>4.01</crap>
      <complexity>4</complexity>
      <coverage>92.31</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>get</methodName>
      <methodSignature>get()</methodSignature>
      <fullMethod>get()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>set</methodName>
      <methodSignature>set($value)</methodSignature>
      <fullMethod>set($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>next</methodName>
      <methodSignature>next(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>next(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>prev</methodName>
      <methodSignature>prev(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>prev(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>top</methodName>
      <methodSignature>top(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>top(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>valid</methodName>
      <methodSignature>valid()</methodSignature>
      <fullMethod>valid()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>offsetExists</methodName>
      <methodSignature>offsetExists(  $offset )</methodSignature>
      <fullMethod>offsetExists(  $offset )</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>offsetGet</methodName>
      <methodSignature>offsetGet(  $offset )</methodSignature>
      <fullMethod>offsetGet(  $offset )</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>offsetSet</methodName>
      <methodSignature>offsetSet(  $offset ,  $value )</methodSignature>
      <fullMethod>offsetSet(  $offset ,  $value )</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>90</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>offsetUnset</methodName>
      <methodSignature>offsetUnset(  $offset )</methodSignature>
      <fullMethod>offsetUnset(  $offset )</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>bottom</methodName>
      <methodSignature>bottom(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>bottom(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>current</methodName>
      <methodSignature>current()</methodSignature>
      <fullMethod>current()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>next</methodName>
      <methodSignature>next()</methodSignature>
      <fullMethod>next()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>prev</methodName>
      <methodSignature>prev()</methodSignature>
      <fullMethod>prev()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>rewind</methodName>
      <methodSignature>rewind()</methodSignature>
      <fullMethod>rewind()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>count</methodName>
      <methodSignature>count()</methodSignature>
      <fullMethod>count()</fullMethod>
      <crap>3.18</crap>
      <complexity>3</complexity>
      <coverage>72.73</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>listAll</methodName>
      <methodSignature>listAll(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>listAll(DataStructureNode $node = NULL)</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>key</methodName>
      <methodSignature>key()</methodSignature>
      <fullMethod>key()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>insertAfter</methodName>
      <methodSignature>insertAfter($key, $value)</methodSignature>
      <fullMethod>insertAfter($key, $value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>insertBefore</methodName>
      <methodSignature>insertBefore($key, $value)</methodSignature>
      <fullMethod>insertBefore($key, $value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete()</methodSignature>
      <fullMethod>delete()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>enqueue</methodName>
      <methodSignature>enqueue($value)</methodSignature>
      <fullMethod>enqueue($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>dequeue</methodName>
      <methodSignature>dequeue()</methodSignature>
      <fullMethod>dequeue()</fullMethod>
      <crap>4.01</crap>
      <complexity>4</complexity>
      <coverage>92.86</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>listAll</methodName>
      <methodSignature>listAll()</methodSignature>
      <fullMethod>listAll()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>peek</methodName>
      <methodSignature>peek()</methodSignature>
      <fullMethod>peek()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>95.45</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>insertAfter</methodName>
      <methodSignature>insertAfter($key, $value)</methodSignature>
      <fullMethod>insertAfter($key, $value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>insertBefore</methodName>
      <methodSignature>insertBefore($key, $value)</methodSignature>
      <fullMethod>insertBefore($key, $value)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>offsetUnset</methodName>
      <methodSignature>offsetUnset(  $offset )</methodSignature>
      <fullMethod>offsetUnset(  $offset )</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete()</methodSignature>
      <fullMethod>delete()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>get</methodName>
      <methodSignature>get()</methodSignature>
      <fullMethod>get()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>set</methodName>
      <methodSignature>set($value)</methodSignature>
      <fullMethod>set($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>next</methodName>
      <methodSignature>next(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>next(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(DataStructure $dataStructure)</methodSignature>
      <fullMethod>__construct(DataStructure $dataStructure)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>count</methodName>
      <methodSignature>count()</methodSignature>
      <fullMethod>count()</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>reverse</methodName>
      <methodSignature>reverse()</methodSignature>
      <fullMethod>reverse()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>findLastElement</methodName>
      <methodSignature>findLastElement()</methodSignature>
      <fullMethod>findLastElement()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>isSorted</methodName>
      <methodSignature>isSorted()</methodSignature>
      <fullMethod>isSorted()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>isUnique</methodName>
      <methodSignature>isUnique()</methodSignature>
      <fullMethod>isUnique()</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>bucketSort</methodName>
      <methodSignature>bucketSort()</methodSignature>
      <fullMethod>bucketSort()</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>quick3Sort</methodName>
      <methodSignature>quick3Sort(DataStructure $dataStructure)</methodSignature>
      <fullMethod>quick3Sort(DataStructure $dataStructure)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>quickSort</methodName>
      <methodSignature>quickSort(DataStructure $dataStructure)</methodSignature>
      <fullMethod>quickSort(DataStructure $dataStructure)</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>split</methodName>
      <methodSignature>split(DataStructure $dataStructure)</methodSignature>
      <fullMethod>split(DataStructure $dataStructure)</fullMethod>
      <crap>4.05</crap>
      <complexity>4</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>append</methodName>
      <methodSignature>append(DataStructure $first, DataStructure $second)</methodSignature>
      <fullMethod>append(DataStructure $first, DataStructure $second)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>merge</methodName>
      <methodSignature>merge(DataStructure $first, DataStructure $second)</methodSignature>
      <fullMethod>merge(DataStructure $first, DataStructure $second)</fullMethod>
      <crap>8.14</crap>
      <complexity>8</complexity>
      <coverage>86.96</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>mergeSort</methodName>
      <methodSignature>mergeSort(DataStructure $dataStructure)</methodSignature>
      <fullMethod>mergeSort(DataStructure $dataStructure)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>bubbleSort</methodName>
      <methodSignature>bubbleSort()</methodSignature>
      <fullMethod>bubbleSort()</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>selectionSort</methodName>
      <methodSignature>selectionSort()</methodSignature>
      <fullMethod>selectionSort()</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>shellSort</methodName>
      <methodSignature>shellSort()</methodSignature>
      <fullMethod>shellSort()</fullMethod>
      <crap>7</crap>
      <complexity>7</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>insertionSortArray</methodName>
      <methodSignature>insertionSortArray()</methodSignature>
      <fullMethod>insertionSortArray()</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>insertionSort</methodName>
      <methodSignature>insertionSort()</methodSignature>
      <fullMethod>insertionSort()</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Sortable</className>
      <methodName>heapSort</methodName>
      <methodSignature>heapSort()</methodSignature>
      <fullMethod>heapSort()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>2.35</crap>
      <complexity>2</complexity>
      <coverage>55.56</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>peek</methodName>
      <methodSignature>peek()</methodSignature>
      <fullMethod>peek()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>register</methodName>
      <methodSignature>register($prepend = false)</methodSignature>
      <fullMethod>register($prepend = false)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>autoload</methodName>
      <methodSignature>autoload($class)</methodSignature>
      <fullMethod>autoload($class)</fullMethod>
      <crap>9</crap>
      <complexity>9</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>registerNonNamespacedAliases</methodName>
      <methodSignature>registerNonNamespacedAliases()</methodSignature>
      <fullMethod>registerNonNamespacedAliases()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>SebastianBergmann\RecursionContext</package>
      <className>Context</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>SebastianBergmann\RecursionContext</package>
      <className>Context</className>
      <methodName>add</methodName>
      <methodSignature>add(&amp;$value)</methodSignature>
      <fullMethod>add(&amp;$value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>SebastianBergmann\RecursionContext</package>
      <className>Context</className>
      <methodName>contains</methodName>
      <methodSignature>contains(&amp;$value)</methodSignature>
      <fullMethod>contains(&amp;$value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>SebastianBergmann\RecursionContext</package>
      <className>Context</className>
      <methodName>addArray</methodName>
      <methodSignature>addArray(array &amp;$array)</methodSignature>
      <fullMethod>addArray(array &amp;$array)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>SebastianBergmann\RecursionContext</package>
      <className>Context</className>
      <methodName>addObject</methodName>
      <methodSignature>addObject($object)</methodSignature>
      <fullMethod>addObject($object)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>SebastianBergmann\RecursionContext</package>
      <className>Context</className>
      <methodName>containsArray</methodName>
      <methodSignature>containsArray(array &amp;$array)</methodSignature>
      <fullMethod>containsArray(array &amp;$array)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>SebastianBergmann\RecursionContext</package>
      <className>Context</className>
      <methodName>containsObject</methodName>
      <methodSignature>containsObject($value)</methodSignature>
      <fullMethod>containsObject($value)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
