<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2015-06-22 16:14:07</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>54</methodCount>
    <crapMethodCount>0</crapMethodCount>
    <crapLoad>0</crapLoad>
    <totalCrap>164</totalCrap>
    <crapMethodPercent>0</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Algorithms</className>
      <methodName>hasCheese</methodName>
      <methodSignature>hasCheese($bool = true)</methodSignature>
      <fullMethod>hasCheese($bool = true)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString()</methodSignature>
      <fullMethod>__toString()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>init</methodName>
      <methodSignature>init()</methodSignature>
      <fullMethod>init()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>current</methodName>
      <methodSignature>current()</methodSignature>
      <fullMethod>current()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>next</methodName>
      <methodSignature>next()</methodSignature>
      <fullMethod>next()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>reset</methodName>
      <methodSignature>reset()</methodSignature>
      <fullMethod>reset()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>prev</methodName>
      <methodSignature>prev()</methodSignature>
      <fullMethod>prev()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>goToPosition</methodName>
      <methodSignature>goToPosition($position)</methodSignature>
      <fullMethod>goToPosition($position)</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>getData</methodName>
      <methodSignature>getData($position = NULL)</methodSignature>
      <fullMethod>getData($position = NULL)</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>listAll</methodName>
      <methodSignature>listAll()</methodSignature>
      <fullMethod>listAll()</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>search</methodName>
      <methodSignature>search($value, $node = null, $position = null)</methodSignature>
      <fullMethod>search($value, $node = null, $position = null)</fullMethod>
      <crap>7.12</crap>
      <complexity>7</complexity>
      <coverage>86.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete($position = NULL)</methodSignature>
      <fullMethod>delete($position = NULL)</fullMethod>
      <crap>5.06</crap>
      <complexity>5</complexity>
      <coverage>86.96</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedList</className>
      <methodName>setData</methodName>
      <methodSignature>setData($value, $position = NULL)</methodSignature>
      <fullMethod>setData($value, $position = NULL)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedListNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>DoubleLinkedListNode</className>
      <methodName>readNode</methodName>
      <methodSignature>readNode()</methodSignature>
      <fullMethod>readNode()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>init</methodName>
      <methodSignature>init()</methodSignature>
      <fullMethod>init()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>add</methodName>
      <methodSignature>add($value,$position = null)</methodSignature>
      <fullMethod>add($value,$position = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>getData</methodName>
      <methodSignature>getData($position = null)</methodSignature>
      <fullMethod>getData($position = null)</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>listAll</methodName>
      <methodSignature>listAll()</methodSignature>
      <fullMethod>listAll()</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>delete</methodName>
      <methodSignature>delete($position = null)</methodSignature>
      <fullMethod>delete($position = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>setData</methodName>
      <methodSignature>setData($value,$position = null)</methodSignature>
      <fullMethod>setData($value,$position = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Queue</className>
      <methodName>search</methodName>
      <methodSignature>search($value)</methodSignature>
      <fullMethod>search($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>init</methodName>
      <methodSignature>init()</methodSignature>
      <fullMethod>init()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>current</methodName>
      <methodSignature>current()</methodSignature>
      <fullMethod>current()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>next</methodName>
      <methodSignature>next()</methodSignature>
      <fullMethod>next()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>reset</methodName>
      <methodSignature>reset()</methodSignature>
      <fullMethod>reset()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>prev</methodName>
      <methodSignature>prev()</methodSignature>
      <fullMethod>prev()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>getData</methodName>
      <methodSignature>getData($position = NULL)</methodSignature>
      <fullMethod>getData($position = NULL)</fullMethod>
      <crap>8.09</crap>
      <complexity>8</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>listAll</methodName>
      <methodSignature>listAll()</methodSignature>
      <fullMethod>listAll()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>search</methodName>
      <methodSignature>search($value)</methodSignature>
      <fullMethod>search($value)</fullMethod>
      <crap>5.01</crap>
      <complexity>5</complexity>
      <coverage>92.86</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete($position = NULL)</methodSignature>
      <fullMethod>delete($position = NULL)</fullMethod>
      <crap>10.95</crap>
      <complexity>10</complexity>
      <coverage>78.79</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedList</className>
      <methodName>setData</methodName>
      <methodSignature>setData($value,$position = NULL)</methodSignature>
      <fullMethod>setData($value,$position = NULL)</fullMethod>
      <crap>13.04</crap>
      <complexity>8</complexity>
      <coverage>57.14</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedListNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>SingleLinkedListNode</className>
      <methodName>readNode</methodName>
      <methodSignature>readNode()</methodSignature>
      <fullMethod>readNode()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>init</methodName>
      <methodSignature>init()</methodSignature>
      <fullMethod>init()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>listAll</methodName>
      <methodSignature>listAll()</methodSignature>
      <fullMethod>listAll()</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>search</methodName>
      <methodSignature>search($value)</methodSignature>
      <fullMethod>search($value)</fullMethod>
      <crap>4.01</crap>
      <complexity>4</complexity>
      <coverage>90.91</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>delete</methodName>
      <methodSignature>delete($position = NULL)</methodSignature>
      <fullMethod>delete($position = NULL)</fullMethod>
      <crap>7.01</crap>
      <complexity>7</complexity>
      <coverage>94.74</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>setData</methodName>
      <methodSignature>setData($value, $position = NULL)</methodSignature>
      <fullMethod>setData($value, $position = NULL)</fullMethod>
      <crap>7.64</crap>
      <complexity>7</complexity>
      <coverage>76.47</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\Algorithms</package>
      <className>Stack</className>
      <methodName>getData</methodName>
      <methodSignature>getData($position = NULL)</methodSignature>
      <fullMethod>getData($position = NULL)</fullMethod>
      <crap>8.01</crap>
      <complexity>8</complexity>
      <coverage>94.44</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>register</methodName>
      <methodSignature>register($prepend = false)</methodSignature>
      <fullMethod>register($prepend = false)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>autoload</methodName>
      <methodSignature>autoload($class)</methodSignature>
      <fullMethod>autoload($class)</fullMethod>
      <crap>9</crap>
      <complexity>9</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>registerNonNamespacedAliases</methodName>
      <methodSignature>registerNonNamespacedAliases()</methodSignature>
      <fullMethod>registerNonNamespacedAliases()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
