<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2015-06-26 21:35:13</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>75</methodCount>
    <crapMethodCount>6</crapMethodCount>
    <crapLoad>44</crapLoad>
    <totalCrap>653.38</totalCrap>
    <crapMethodPercent>8</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>7.14</crap>
      <complexity>7</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>validate</methodName>
      <methodSignature>validate()</methodSignature>
      <fullMethod>validate()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>delete</methodName>
      <methodSignature>delete(TreeNodeInterface $node)</methodSignature>
      <fullMethod>delete(TreeNodeInterface $node)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>deleteValue</methodName>
      <methodSignature>deleteValue($value)</methodSignature>
      <fullMethod>deleteValue($value)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTree</className>
      <methodName>search</methodName>
      <methodSignature>search($value)</methodSignature>
      <fullMethod>search($value)</fullMethod>
      <crap>7.1</crap>
      <complexity>6</complexity>
      <coverage>68.75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinarySearchTreeNode</className>
      <methodName>validate</methodName>
      <methodSignature>validate()</methodSignature>
      <fullMethod>validate()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>root</methodName>
      <methodSignature>root(TreeNodeInterface $node = NULL)</methodSignature>
      <fullMethod>root(TreeNodeInterface $node = NULL)</fullMethod>
      <crap>3.03</crap>
      <complexity>3</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>delete</methodName>
      <methodSignature>delete(TreeNodeInterface $node)</methodSignature>
      <fullMethod>delete(TreeNodeInterface $node)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>predecessor</methodName>
      <methodSignature>predecessor(TreeNodeInterface $node)</methodSignature>
      <fullMethod>predecessor(TreeNodeInterface $node)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>successor</methodName>
      <methodSignature>successor(TreeNodeInterface $node)</methodSignature>
      <fullMethod>successor(TreeNodeInterface $node)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>search</methodName>
      <methodSignature>search($value)</methodSignature>
      <fullMethod>search($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>breadthFirst</methodName>
      <methodSignature>breadthFirst(TreeNodeInterface $node = null)</methodSignature>
      <fullMethod>breadthFirst(TreeNodeInterface $node = null)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>depthFirsth</methodName>
      <methodSignature>depthFirsth(TreeNodeInterface $node = null, $mode)</methodSignature>
      <fullMethod>depthFirsth(TreeNodeInterface $node = null, $mode)</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>inOrder</methodName>
      <methodSignature>inOrder(TreeNodeInterface $node = null)</methodSignature>
      <fullMethod>inOrder(TreeNodeInterface $node = null)</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>postOrder</methodName>
      <methodSignature>postOrder(TreeNodeInterface $node = null)
    
    // first print self, recursive</methodSignature>
      <fullMethod>postOrder(TreeNodeInterface $node = null)
    
    // first print self, recursive</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTree</className>
      <methodName>preOrder</methodName>
      <methodSignature>preOrder(TreeNodeInterface $node = null)</methodSignature>
      <fullMethod>preOrder(TreeNodeInterface $node = null)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>left</methodName>
      <methodSignature>left(TreeNodeInterface $node = NULL)</methodSignature>
      <fullMethod>left(TreeNodeInterface $node = NULL)</fullMethod>
      <crap>3.04</crap>
      <complexity>3</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>right</methodName>
      <methodSignature>right(TreeNodeInterface $node = NULL)</methodSignature>
      <fullMethod>right(TreeNodeInterface $node = NULL)</fullMethod>
      <crap>3.04</crap>
      <complexity>3</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>get</methodName>
      <methodSignature>get()</methodSignature>
      <fullMethod>get()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>BinaryTreeNode</className>
      <methodName>set</methodName>
      <methodSignature>set($value)</methodSignature>
      <fullMethod>set($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>insertAfter</methodName>
      <methodSignature>insertAfter($key, $value)</methodSignature>
      <fullMethod>insertAfter($key, $value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>insertBefore</methodName>
      <methodSignature>insertBefore($key, $value)</methodSignature>
      <fullMethod>insertBefore($key, $value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete()</methodSignature>
      <fullMethod>delete()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>get</methodName>
      <methodSignature>get()</methodSignature>
      <fullMethod>get()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>set</methodName>
      <methodSignature>set($value)</methodSignature>
      <fullMethod>set($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>next</methodName>
      <methodSignature>next(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>next(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>DoubleLinkedListNode</className>
      <methodName>prev</methodName>
      <methodSignature>prev(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>prev(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>top</methodName>
      <methodSignature>top(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>top(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>bottom</methodName>
      <methodSignature>bottom(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>bottom(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>current</methodName>
      <methodSignature>current()</methodSignature>
      <fullMethod>current()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>next</methodName>
      <methodSignature>next()</methodSignature>
      <fullMethod>next()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>prev</methodName>
      <methodSignature>prev()</methodSignature>
      <fullMethod>prev()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>rewind</methodName>
      <methodSignature>rewind()</methodSignature>
      <fullMethod>rewind()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>count</methodName>
      <methodSignature>count()</methodSignature>
      <fullMethod>count()</fullMethod>
      <crap>3.43</crap>
      <complexity>3</complexity>
      <coverage>63.64</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>listAll</methodName>
      <methodSignature>listAll(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>listAll(DataStructureNode $node = NULL)</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>key</methodName>
      <methodSignature>key()</methodSignature>
      <fullMethod>key()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>insertAfter</methodName>
      <methodSignature>insertAfter($key, $value)</methodSignature>
      <fullMethod>insertAfter($key, $value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>insertBefore</methodName>
      <methodSignature>insertBefore($key, $value)</methodSignature>
      <fullMethod>insertBefore($key, $value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete()</methodSignature>
      <fullMethod>delete()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>LinkedList</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>enqueue</methodName>
      <methodSignature>enqueue($value)</methodSignature>
      <fullMethod>enqueue($value)</fullMethod>
      <crap>2.11</crap>
      <complexity>2</complexity>
      <coverage>70</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>dequeue</methodName>
      <methodSignature>dequeue()</methodSignature>
      <fullMethod>dequeue()</fullMethod>
      <crap>8.12</crap>
      <complexity>5</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>peek</methodName>
      <methodSignature>peek()</methodSignature>
      <fullMethod>peek()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Queue</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>95.45</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>add</methodName>
      <methodSignature>add($value)</methodSignature>
      <fullMethod>add($value)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>insertAfter</methodName>
      <methodSignature>insertAfter($key, $value)</methodSignature>
      <fullMethod>insertAfter($key, $value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>insertBefore</methodName>
      <methodSignature>insertBefore($key, $value)</methodSignature>
      <fullMethod>insertBefore($key, $value)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedList</className>
      <methodName>delete</methodName>
      <methodSignature>delete()</methodSignature>
      <fullMethod>delete()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($data)</methodSignature>
      <fullMethod>__construct($data)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>get</methodName>
      <methodSignature>get()</methodSignature>
      <fullMethod>get()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>set</methodName>
      <methodSignature>set($value)</methodSignature>
      <fullMethod>set($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>SingleLinkedListNode</className>
      <methodName>next</methodName>
      <methodSignature>next(DataStructureNode $node = NULL)</methodSignature>
      <fullMethod>next(DataStructureNode $node = NULL)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>push</methodName>
      <methodSignature>push($value)</methodSignature>
      <fullMethod>push($value)</fullMethod>
      <crap>2.35</crap>
      <complexity>2</complexity>
      <coverage>55.56</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>pop</methodName>
      <methodSignature>pop()</methodSignature>
      <fullMethod>pop()</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Mtkocak\DataStructures</package>
      <className>Stack</className>
      <methodName>peek</methodName>
      <methodSignature>peek()</methodSignature>
      <fullMethod>peek()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>register</methodName>
      <methodSignature>register($prepend = false)</methodSignature>
      <fullMethod>register($prepend = false)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>autoload</methodName>
      <methodSignature>autoload($class)</methodSignature>
      <fullMethod>autoload($class)</fullMethod>
      <crap>9</crap>
      <complexity>9</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>PhpParser</package>
      <className>Autoloader</className>
      <methodName>registerNonNamespacedAliases</methodName>
      <methodSignature>registerNonNamespacedAliases()</methodSignature>
      <fullMethod>registerNonNamespacedAliases()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
